/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DistanceCalculation } from "./DistanceCalculation";
import { DistanceCalculationCountArgs } from "./DistanceCalculationCountArgs";
import { DistanceCalculationFindManyArgs } from "./DistanceCalculationFindManyArgs";
import { DistanceCalculationFindUniqueArgs } from "./DistanceCalculationFindUniqueArgs";
import { CreateDistanceCalculationArgs } from "./CreateDistanceCalculationArgs";
import { UpdateDistanceCalculationArgs } from "./UpdateDistanceCalculationArgs";
import { DeleteDistanceCalculationArgs } from "./DeleteDistanceCalculationArgs";
import { Route } from "../../route/base/Route";
import { DistanceCalculationService } from "../distanceCalculation.service";
@graphql.Resolver(() => DistanceCalculation)
export class DistanceCalculationResolverBase {
  constructor(protected readonly service: DistanceCalculationService) {}

  async _distanceCalculationsMeta(
    @graphql.Args() args: DistanceCalculationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DistanceCalculation])
  async distanceCalculations(
    @graphql.Args() args: DistanceCalculationFindManyArgs
  ): Promise<DistanceCalculation[]> {
    return this.service.distanceCalculations(args);
  }

  @graphql.Query(() => DistanceCalculation, { nullable: true })
  async distanceCalculation(
    @graphql.Args() args: DistanceCalculationFindUniqueArgs
  ): Promise<DistanceCalculation | null> {
    const result = await this.service.distanceCalculation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DistanceCalculation)
  async createDistanceCalculation(
    @graphql.Args() args: CreateDistanceCalculationArgs
  ): Promise<DistanceCalculation> {
    return await this.service.createDistanceCalculation({
      ...args,
      data: {
        ...args.data,

        route: args.data.route
          ? {
              connect: args.data.route,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DistanceCalculation)
  async updateDistanceCalculation(
    @graphql.Args() args: UpdateDistanceCalculationArgs
  ): Promise<DistanceCalculation | null> {
    try {
      return await this.service.updateDistanceCalculation({
        ...args,
        data: {
          ...args.data,

          route: args.data.route
            ? {
                connect: args.data.route,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DistanceCalculation)
  async deleteDistanceCalculation(
    @graphql.Args() args: DeleteDistanceCalculationArgs
  ): Promise<DistanceCalculation | null> {
    try {
      return await this.service.deleteDistanceCalculation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Route, {
    nullable: true,
    name: "route",
  })
  async getRoute(
    @graphql.Parent() parent: DistanceCalculation
  ): Promise<Route | null> {
    const result = await this.service.getRoute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
