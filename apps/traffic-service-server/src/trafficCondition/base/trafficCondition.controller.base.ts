/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrafficConditionService } from "../trafficCondition.service";
import { TrafficConditionCreateInput } from "./TrafficConditionCreateInput";
import { TrafficCondition } from "./TrafficCondition";
import { TrafficConditionFindManyArgs } from "./TrafficConditionFindManyArgs";
import { TrafficConditionWhereUniqueInput } from "./TrafficConditionWhereUniqueInput";
import { TrafficConditionUpdateInput } from "./TrafficConditionUpdateInput";

export class TrafficConditionControllerBase {
  constructor(protected readonly service: TrafficConditionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrafficCondition })
  async createTrafficCondition(
    @common.Body() data: TrafficConditionCreateInput
  ): Promise<TrafficCondition> {
    return await this.service.createTrafficCondition({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrafficCondition] })
  @ApiNestedQuery(TrafficConditionFindManyArgs)
  async trafficConditions(
    @common.Req() request: Request
  ): Promise<TrafficCondition[]> {
    const args = plainToClass(TrafficConditionFindManyArgs, request.query);
    return this.service.trafficConditions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrafficCondition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trafficCondition(
    @common.Param() params: TrafficConditionWhereUniqueInput
  ): Promise<TrafficCondition | null> {
    const result = await this.service.trafficCondition({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrafficCondition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrafficCondition(
    @common.Param() params: TrafficConditionWhereUniqueInput,
    @common.Body() data: TrafficConditionUpdateInput
  ): Promise<TrafficCondition | null> {
    try {
      return await this.service.updateTrafficCondition({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrafficCondition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrafficCondition(
    @common.Param() params: TrafficConditionWhereUniqueInput
  ): Promise<TrafficCondition | null> {
    try {
      return await this.service.deleteTrafficCondition({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
