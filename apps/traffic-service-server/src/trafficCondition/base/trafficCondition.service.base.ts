/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TrafficCondition as PrismaTrafficCondition,
} from "@prisma/client";

export class TrafficConditionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrafficConditionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trafficCondition.count(args);
  }

  async trafficConditions(
    args: Prisma.TrafficConditionFindManyArgs
  ): Promise<PrismaTrafficCondition[]> {
    return this.prisma.trafficCondition.findMany(args);
  }
  async trafficCondition(
    args: Prisma.TrafficConditionFindUniqueArgs
  ): Promise<PrismaTrafficCondition | null> {
    return this.prisma.trafficCondition.findUnique(args);
  }
  async createTrafficCondition(
    args: Prisma.TrafficConditionCreateArgs
  ): Promise<PrismaTrafficCondition> {
    return this.prisma.trafficCondition.create(args);
  }
  async updateTrafficCondition(
    args: Prisma.TrafficConditionUpdateArgs
  ): Promise<PrismaTrafficCondition> {
    return this.prisma.trafficCondition.update(args);
  }
  async deleteTrafficCondition(
    args: Prisma.TrafficConditionDeleteArgs
  ): Promise<PrismaTrafficCondition> {
    return this.prisma.trafficCondition.delete(args);
  }
}
