/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DistanceCalculation as PrismaDistanceCalculation,
  Route as PrismaRoute,
} from "@prisma/client";

export class DistanceCalculationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DistanceCalculationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.distanceCalculation.count(args);
  }

  async distanceCalculations(
    args: Prisma.DistanceCalculationFindManyArgs
  ): Promise<PrismaDistanceCalculation[]> {
    return this.prisma.distanceCalculation.findMany(args);
  }
  async distanceCalculation(
    args: Prisma.DistanceCalculationFindUniqueArgs
  ): Promise<PrismaDistanceCalculation | null> {
    return this.prisma.distanceCalculation.findUnique(args);
  }
  async createDistanceCalculation(
    args: Prisma.DistanceCalculationCreateArgs
  ): Promise<PrismaDistanceCalculation> {
    return this.prisma.distanceCalculation.create(args);
  }
  async updateDistanceCalculation(
    args: Prisma.DistanceCalculationUpdateArgs
  ): Promise<PrismaDistanceCalculation> {
    return this.prisma.distanceCalculation.update(args);
  }
  async deleteDistanceCalculation(
    args: Prisma.DistanceCalculationDeleteArgs
  ): Promise<PrismaDistanceCalculation> {
    return this.prisma.distanceCalculation.delete(args);
  }

  async getRoute(parentId: string): Promise<PrismaRoute | null> {
    return this.prisma.distanceCalculation
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }
}
