/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrafficCondition } from "./TrafficCondition";
import { TrafficConditionCountArgs } from "./TrafficConditionCountArgs";
import { TrafficConditionFindManyArgs } from "./TrafficConditionFindManyArgs";
import { TrafficConditionFindUniqueArgs } from "./TrafficConditionFindUniqueArgs";
import { DeleteTrafficConditionArgs } from "./DeleteTrafficConditionArgs";
import { TrafficConditionService } from "../trafficCondition.service";
@graphql.Resolver(() => TrafficCondition)
export class TrafficConditionResolverBase {
  constructor(protected readonly service: TrafficConditionService) {}

  async _trafficConditionsMeta(
    @graphql.Args() args: TrafficConditionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrafficCondition])
  async trafficConditions(
    @graphql.Args() args: TrafficConditionFindManyArgs
  ): Promise<TrafficCondition[]> {
    return this.service.trafficConditions(args);
  }

  @graphql.Query(() => TrafficCondition, { nullable: true })
  async trafficCondition(
    @graphql.Args() args: TrafficConditionFindUniqueArgs
  ): Promise<TrafficCondition | null> {
    const result = await this.service.trafficCondition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrafficCondition)
  async deleteTrafficCondition(
    @graphql.Args() args: DeleteTrafficConditionArgs
  ): Promise<TrafficCondition | null> {
    try {
      return await this.service.deleteTrafficCondition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
