/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DistanceCalculationService } from "../distanceCalculation.service";
import { DistanceCalculationCreateInput } from "./DistanceCalculationCreateInput";
import { DistanceCalculation } from "./DistanceCalculation";
import { DistanceCalculationFindManyArgs } from "./DistanceCalculationFindManyArgs";
import { DistanceCalculationWhereUniqueInput } from "./DistanceCalculationWhereUniqueInput";
import { DistanceCalculationUpdateInput } from "./DistanceCalculationUpdateInput";

export class DistanceCalculationControllerBase {
  constructor(protected readonly service: DistanceCalculationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DistanceCalculation })
  async createDistanceCalculation(
    @common.Body() data: DistanceCalculationCreateInput
  ): Promise<DistanceCalculation> {
    return await this.service.createDistanceCalculation({
      data: {
        ...data,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,
      },
      select: {
        algorithmUsed: true,
        createdAt: true,
        id: true,
        result: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DistanceCalculation] })
  @ApiNestedQuery(DistanceCalculationFindManyArgs)
  async distanceCalculations(
    @common.Req() request: Request
  ): Promise<DistanceCalculation[]> {
    const args = plainToClass(DistanceCalculationFindManyArgs, request.query);
    return this.service.distanceCalculations({
      ...args,
      select: {
        algorithmUsed: true,
        createdAt: true,
        id: true,
        result: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DistanceCalculation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async distanceCalculation(
    @common.Param() params: DistanceCalculationWhereUniqueInput
  ): Promise<DistanceCalculation | null> {
    const result = await this.service.distanceCalculation({
      where: params,
      select: {
        algorithmUsed: true,
        createdAt: true,
        id: true,
        result: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DistanceCalculation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDistanceCalculation(
    @common.Param() params: DistanceCalculationWhereUniqueInput,
    @common.Body() data: DistanceCalculationUpdateInput
  ): Promise<DistanceCalculation | null> {
    try {
      return await this.service.updateDistanceCalculation({
        where: params,
        data: {
          ...data,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,
        },
        select: {
          algorithmUsed: true,
          createdAt: true,
          id: true,
          result: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DistanceCalculation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDistanceCalculation(
    @common.Param() params: DistanceCalculationWhereUniqueInput
  ): Promise<DistanceCalculation | null> {
    try {
      return await this.service.deleteDistanceCalculation({
        where: params,
        select: {
          algorithmUsed: true,
          createdAt: true,
          id: true,
          result: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
